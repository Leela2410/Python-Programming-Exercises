Question 1:
Create a variable called 'pi' and assign the float value 3.1415 to it. Print the value of pi.

Solution:
pi=3.1415
print('value of pi is:',pi)

*****OUTPUT*****value of pi is: 3.1415

Question 2:
Create a list 'myList' with the following elements in it: 'a', [1, 2, 3] and 'abc' to it.
Add another element 'batch' to it. Extract out [1,2,3] from it.

Solution:
mylist=['a',[1,2,3],'abc']
print(mylist)
mylist.append('batch')  # adds elememt at the end of the list
print('after adding:',mylist)
print(mylist[1][1]) #getting sublist element
mylist.pop(1)   # delete elements with respective of index
print('after del of sublist:',mylist)

*****OUTPUT*****['a', [1, 2, 3], 'abc']
after adding: ['a', [1, 2, 3], 'abc', 'batch']
2
after del of sublist: ['a', 'abc', 'batch']

Question 3:
Create a list 'mySecondList' with the following elements in it: 'a', 'b', 23, True.
Extract out the last element using reverse indexing. Change the element at index 1 to 'bat'. Print out the modified list

Solution:
mysecondlist=['a','b',23,'True']
mysecondlist.pop(-1)  # reverse indexing is possible 
mysecondlist.insert(1,'bat') # insert element with repective of index
print('modified list:',mysecondlist)

*****OUTPUT*****modified list: ['a', 'bat', 'b', 23]

Question 4:
Create a dictionary 'myDict' with the following (key, value) pairs. ('Name', "XYZ"), ('Batch', 02), ("Location", "Bangalore"). Iterate over the dictionary and print out the following (order doesn't matter):
My Name is XYZ My Batch is 02 My Location is Bangalore

Solution:
myDict={'Name':'XYZ','Batch':2,'Location':'Bangalore'}
print(myDict.get('Branch','there is no branch for this batch')) 
for x,y in myDict.items():
    print('My', x, 'is', y)
   
*****OUTPUT***** there is no branch for this batch
My Name is XYZ
My Batch is 2
My Location is Bangalore

Question 5:
Create a tuple named 'myTup' with the following elements: 1, 2, 'abc'. Print this tuple. Access the first two elements of the tuple. Can you add another element 'xyz' to myTup?
What should we do if we want to get (1, 2, 'abc', 'xyz') usin gthe existing tuple?

Solution:
mytup=(1,2,'abc')
print(mytup)
print('first two elements are:',mytup[0:2])
tup=('xyz',)
print(mytup+tup)

*****OUTPUT*****(1, 2, 'abc')
first two elements are: (1, 2)
(1, 2, 'abc', 'xyz')

Question 6:
Read in an integer number using raw_input. Using if-else statement, check if the number is even or odd.
If even, print out "Number is even". If odd, print out "Number is odd" (HINT: Use % operator). What if number is 0?

Solution:
print('program to check if the number is even or odd ')
num=int(input('enter any number:'))
if num==0:
    print("{} is invalid input".format(num))
elif (num % 2) == 0:
    print("{} is Even".format(num))
else:
    print("{} is Odd".format(num))
    
*****OUTPUT*****
program to check if the number is even or odd 
enter any number:568
568 is Even

Question 7:
Using a for loop and range() function, print out all the odd numbers between 20-30.

Solution:-
for num in range(20,30):
    if(num%2!=0):
        print(num)

        
lower=int(input('\nenter any number from where you want to check odd numbers:'))
upper=int(input('enter any number up to where you want to check odd numbers:'))
for num in range(lower,upper):
    if(num%2!=0):
        print(num)

*****OUTPUT*****
21
23
25
27
29

Question 8:
Write a program to find greatest common divisor (GCD) or highest common factor (HCF) of given two numbers.

Solution:
a=int(input('enter any number:'))
b=int(input('enter any number:'))
while a%b!=0:
    x=a%b #holds reminder
    a=b   #assign b value to a
    b=x   # b holds x value 
print('HCF is:',b)

*****OUTPUT*****
enter any number:60
enter any number:48
HCF is: 12


Question 9:
Create two variables: 'var1' with values 1-5 and 'var2' with values 10-20 in steps of 2 (i.e., 10,12,14,... etc). 
Using list comprehensions, print out result of (var1+var2) if (var1+var2) is a multiple of 3.

Solution:
var1=[1,2,3,4,5]
var2=[10,12,14,16,18,20]
res=[var1[i]+var2[j]  for i in range(5) for j in range(6) if(var1[i]+var2[j])%3==0]
print(res)

*****OUTPUT*****
[12, 15, 18, 21, 24]

Question 10:
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

Solution:
total = 0
for i in range(1,1000):
    if i%3 == 0 or i % 5 == 0:
        total += i
print('sum of all the multiples of 3 or 5 below 1000:',total)


*****OUTPUT*****
sum of all the multiples of 3 or 5 below 1000: 233168

Question 11:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
By considering the terms in the Fibonacci sequence whose values do not exceed 4000, find the sum of the even-valued terms.

Solution:
def fib(n):
    a,b=1,2
    print('a value is:',a)
    print('b value is:',b)
    sum=0
    list=[]
  
    for i in range(1,n+1):
        c=a+b
        a,b=b,c
        list.append(c)
        if c%2==0:
            sum=sum+c
    print(list)
    print ("\n sum of the even-valued terms",sum)

fib(16)

*****OUTPUT*****
a value is: 1
b value is: 2
[3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]

 sum of the even-valued terms 3380
 
 Question 12:
 The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 60085?
 
 Solution:
 def Largest_Prime_Factor(n):
    prime_factor = 1
    i=2
    
    while i <= n / i:
        if n%i == 0:
            prime_factor = i
            n/= i
        else:
            i += 1
    if prime_factor < n:
        prime_factor = n
        
    return prime_factor 
 Largest_Prime_Factor(600851475143)   
*****OUTPUT*****
6857.0

Question 13:
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99. 
Find the largest palindrome made from the product of two 3-digit numbers.

 Solution 1:
 n = []
for a in range(999,100,-1):
    for b in range(a, 100,-1):
        prod = a*b
        if str(prod) == str(prod)[::-1]:
            n.append(prod)
print(max(n))

Solution 2:
def palindromic(c):
    n = 0
    for a in range(c,100,-1):
        for b in range(a,100,-1):
            x = a
            y = b
            z = a * b
            if z > n:
                s = str(a*b)
                if s == s[::-1]:
                    n = a * b
    print(n)
*****OUTPUT*****
906609

Question 14:
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. 
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 15?

Solution:
import time
number = 2520
for i in range(1,21):
    if number%i==0:
        print(number)
        time.sleep(3)
    else:
        number += 1

*****OUTPUT*****

Question 15:
The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385 The square of the sum of the first ten natural numbers is, 
(1 + 2 + ... + 10)^2 = 55^2 = 3025 The difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640. 
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum...
 
Solution:
class First():
    def sosq(self):
        sum_of_sq=0
        for i in range(1,101):
            sum_of_sq += i*i
        return(sum_of_sq)
    def sqos(self):
        sq_of_sum=0
        for i in range(1,101):
            sq_of_sum += i
        sq_of_sum = sq_of_sum ** 2
        return(sq_of_sum)
obj1=First()
print("Difference is:", obj1.sqos() - obj1.sosq())

*****OUTPUT*****
Difference is: 25164150

Question 16:
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 10001 prime number?

Solution:
def main(num_to_find):
    x=3
    list_of_primes=[2]
    while(len(list_of_primes) < num_to_find):
        if all(x % i for i in list_of_primes):
            list_of_primes.append(x)
        x += 1
#     print(list_of_primes)
    print("10001 prime number is:", list_of_primes[-1])
# main(6)
main(10001)

*****OUTPUT*****
10001 prime number is: 104743

Question 17:
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2. For example, 32 + 42 = 9 + 16 = 25 = 52. 
There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.

Solution:
def product(sum):
    for a in range(1,sum):
        for b in range(1,sum):
            c = sum - a - b
            if a**2 + b**2 == c**2:
                print( a, b, c)
                return a * b * c
            else:
                pass
    print(" no triplet:")
product(1000)

*****OUTPUT*****
200 375 425
31875000

Question 18:
2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of the number 2^1000?

Solution:
    c=a**b
#     print(c)
    res = [int(x) for x in str(c)]
    print(res,"\nsum of digits:",sum(res))
power(2,1000)

*****OUTPUT*****
sum of digits: 1366

Question 19:
Write a Python program to create a histogram from a given list of integers.

Solution:
def histogram(list):
    for i in list:
        res = ''
        times = i
        while( times > 0 ):
            res += '@'
            times = times-1
        print(res)
histogram([1,2,3,4,5,6,7])

*****OUTPUT*****
@
@@
@@@
@@@@
@@@@@
@@@@@@
@@@@@@@


